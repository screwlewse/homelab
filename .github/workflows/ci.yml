name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  TERRAFORM_VERSION: "1.9.0"
  SHELLCHECK_VERSION: "0.10.0"
  TFSEC_VERSION: "1.28.0"
  YAMLLINT_VERSION: "1.35.0"

jobs:
  lint-shell:
    name: Lint Shell Scripts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          scandir: "./scripts"
          severity: warning
          check_together: yes
          format: gcc

      - name: Check executable permissions
        run: |
          echo "Checking for shell scripts without execute permissions..."
          find . -name "*.sh" -type f ! -perm -111 | while read -r file; do
            echo "ERROR: $file is not executable"
            exit 1
          done || echo "All shell scripts have proper permissions"

  lint-terraform:
    name: Lint Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: |
          echo "Checking Terraform formatting..."
          terraform fmt -check -recursive
        working-directory: ./terraform

      - name: Terraform Init
        run: terraform init -backend=false
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ./terraform
          soft_fail: true
          format: json
          additional_args: --minimum-severity MEDIUM

  lint-yaml:
    name: Lint YAML Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install yamllint
        run: |
          pip install yamllint==${{ env.YAMLLINT_VERSION }}

      - name: Run yamllint
        run: |
          yamllint . -f github -c .yamllint.yml || true

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run git-secrets
        run: |
          # Install git-secrets
          git clone https://github.com/awslabs/git-secrets.git
          cd git-secrets && sudo make install && cd ..
          
          # Initialize git-secrets
          git secrets --register-aws
          git secrets --install
          
          # Scan for secrets
          git secrets --scan || exit 1

  markdown-lint:
    name: Lint Markdown
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run markdownlint
        uses: DavidAnson/markdownlint-cli2-action@v15
        with:
          globs: |
            **/*.md
            !node_modules
            !.git

  test-makefile:
    name: Test Makefile Targets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Makefile help
        run: make help

      - name: Check Makefile targets
        run: |
          echo "Validating critical Makefile targets exist..."
          targets=("tf-init" "tf-plan" "tf-apply" "tf-test" "deploy-all" "verify" "status")
          for target in "${targets[@]}"; do
            if ! grep -q "^${target}:" Makefile; then
              echo "ERROR: Missing Makefile target: $target"
              exit 1
            fi
          done
          echo "All critical Makefile targets found"

  docker-lint:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    if: false  # Enable when Dockerfiles are added
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          recursive: true
          ignore: DL3008

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-shell, lint-terraform, lint-yaml, security-scan, markdown-lint, test-makefile]
    if: always()
    steps:
      - name: Check job results
        run: |
          echo "## CI Pipeline Summary"
          echo
          echo "### Job Results:"
          echo "- Shell Linting: ${{ needs.lint-shell.result }}"
          echo "- Terraform Linting: ${{ needs.lint-terraform.result }}"
          echo "- YAML Linting: ${{ needs.lint-yaml.result }}"
          echo "- Security Scanning: ${{ needs.security-scan.result }}"
          echo "- Markdown Linting: ${{ needs.markdown-lint.result }}"
          echo "- Makefile Testing: ${{ needs.test-makefile.result }}"
          
          # Fail if any required job failed
          if [[ "${{ needs.lint-shell.result }}" == "failure" ]] || \
             [[ "${{ needs.lint-terraform.result }}" == "failure" ]] || \
             [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo
            echo "❌ CI Pipeline failed - critical checks did not pass"
            exit 1
          else
            echo
            echo "✅ CI Pipeline passed - all critical checks successful"
          fi